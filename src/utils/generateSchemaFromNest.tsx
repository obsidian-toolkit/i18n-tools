import React from 'react';

import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { render } from 'ink';

import { SCHEMA_FILE, TYPES_DIR } from '../constants';
import { Error } from '../shared-ui/Error';
import { Success } from '../shared-ui/Success';
import { NestedObject } from '../types/definitions';

function generateTypes(nest: NestedObject): string {
    const interfaceLines: string[] = [];

    function traverse(
        obj: NestedObject,
        indent: number = 1,
        path: string = ''
    ): void {
        for (const [key, value] of Object.entries(obj)) {
            const indentStr = '    '.repeat(indent);
            const currentPath = path ? `${path}.${key}` : key;

            if (Array.isArray(value)) {
                interfaceLines.push(`${indentStr}${key}: string[];`);
            } else if (typeof value === 'object' && value !== null) {
                interfaceLines.push(`${indentStr}${key}: {`);
                traverse(value, indent + 1, currentPath);
                interfaceLines.push(`${indentStr}};`);
            } else if (typeof value === 'string') {
                interfaceLines.push(`${indentStr}${key}: string;`);
            }
        }
    }

    traverse(nest);
    return `export interface LocaleSchema {\n${interfaceLines.join('\n')}\n}`;
}

export async function generateSchemaFromNest(
    nested: NestedObject
): Promise<void> {
    try {
        const types = generateTypes(nested);

        if (!existsSync(TYPES_DIR)) {
            mkdirSync(TYPES_DIR, { recursive: true });
        }

        const typesContent = `
        /**
 * ⚠️ AUTO-GENERATED FILE — DO NOT EDIT!
 *
 * This file was generated by the \`nest\` script from 'flat.json'.
 * To update it, run: \`npm run locale:nest <locale>\`
 */


${types}
`.trim();

        writeFileSync(SCHEMA_FILE, typesContent);
        await render(<Success message={`✅ Generated ${SCHEMA_FILE}`} />).waitUntilExit();
    } catch (error) {
        render(<Error message={'❌ Error generating types:'} />);
    }
}
