import { jsx as _jsx } from "react/jsx-runtime";
import { existsSync, readFileSync, writeFileSync } from 'fs';
import { render } from 'ink';
import { join } from 'path';
import { LOCALE_DIR } from '../constants';
import { Error } from '../shared-ui/Error';
import { Success } from '../shared-ui/Success';
import { flatToNest } from '../utils/flatToNest';
import { generateSchemaFromNest } from '../utils/generateSchemaFromNest';
import { sortObjectKeys } from '../utils/sortObjKeys';
export async function nest(locale) {
    const localeDir = join(LOCALE_DIR, locale);
    const jsonPath = join(localeDir, 'flat.json');
    const tsPath = join(localeDir, 'index.ts');
    if (!existsSync(jsonPath)) {
        render(_jsx(Error, { message: `${jsonPath} not found` }));
    }
    try {
        const flatData = JSON.parse(readFileSync(jsonPath, 'utf8'));
        const sortedFlatData = sortObjectKeys(flatData);
        writeFileSync(jsonPath, JSON.stringify(sortedFlatData, null, 4));
        const nested = sortObjectKeys(flatToNest(sortedFlatData));
        const jsonString = JSON.stringify(nested, null, 4);
        const cleanJson = jsonString?.replace(/"([a-zA-Z_$][a-zA-Z0-9_$]*)"\s*:/g, '$1:');
        const tsContent = `/**
 * ⚠️ AUTO-GENERATED FILE — DO NOT EDIT!
 *
 * This file was generated by the \`nest\` script from 'flat.json'.
 * To update it, run: \`npm run locale:nest <locale>\`
 */
 
 
import type { LocaleSchema } from '../../types/interfaces';
${locale !== 'en' ? `import { DeepPartial } from '../../types/definitions';\n` : ''}
           
const Locale: ${locale !== 'en' ? 'DeepPartial<LocaleSchema>' : 'LocaleSchema'}  = ${cleanJson};

export default Locale;`;
        writeFileSync(tsPath, tsContent);
        render(_jsx(Success, { message: `✅ Generated ${tsPath}` }));
        if (locale === 'en') {
            await generateSchemaFromNest(nested);
        }
        return;
    }
    catch (error) {
        render(_jsx(Error, { message: `${error.message}` }));
    }
}
