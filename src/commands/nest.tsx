import React from 'react';

import { existsSync, readFileSync, writeFileSync } from 'fs';
import { render } from 'ink';
import { join } from 'path';

import { LOCALE_DIR } from '../constants';
import { Error } from '../shared-ui/Error';
import { Success } from '../shared-ui/Success';
import { FlatObject } from '../types/definitions';
import { flatToNest } from '../utils/flatToNest';
import { generateSchemaFromNest } from '../utils/generateSchemaFromNest';
import { sortObjectKeys } from '../utils/sortObjKeys';

export async function nest(locale: string) {
    const localeDir = join(LOCALE_DIR, locale);
    const jsonPath = join(localeDir, 'flat.json');
    const tsPath = join(localeDir, 'index.ts');

    if (!existsSync(jsonPath)) {
        render(<Error message={`${jsonPath} not found`} />);
    }

    try {
        const flatData = JSON.parse(
            readFileSync(jsonPath, 'utf8')
        ) as FlatObject;

        const sortedFlatData = sortObjectKeys(flatData);

        writeFileSync(jsonPath, JSON.stringify(sortedFlatData, null, 4) as any);

        const nested = sortObjectKeys(flatToNest(sortedFlatData));
        const jsonString = JSON.stringify(nested, null, 4);
        const cleanJson = jsonString?.replace(
            /"([a-zA-Z_$][a-zA-Z0-9_$]*)"\s*:/g,
            '$1:'
        );

        const tsContent = `/**
 * ⚠️ AUTO-GENERATED FILE — DO NOT EDIT!
 *
 * This file was generated by the \`nest\` script from 'flat.json'.
 * To update it, run: \`npm run locale:nest <locale>\`
 */
 
 
import type { LocaleSchema } from '../../types/interfaces';
${locale !== 'en' ? `import { DeepPartial } from '../../types/definitions';\n` : ''}
           
const Locale: ${locale !== 'en' ? 'DeepPartial<LocaleSchema>' : 'LocaleSchema'}  = ${cleanJson};

export default Locale;`;

        writeFileSync(tsPath, tsContent);
        render(<Success message={`✅ Generated ${tsPath}`} />);

        if (locale === 'en') {
            await generateSchemaFromNest(nested);
        }
        return;
    } catch (error: any) {
        render(<Error message={`${error.message}`} />);
    }
}
